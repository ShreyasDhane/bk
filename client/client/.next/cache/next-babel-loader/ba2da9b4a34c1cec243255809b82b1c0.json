{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Bhimkatta-20240216T072757Z-001\\\\Bhimkatta\\\\client\\\\client\\\\pages\\\\questions\\\\[slug].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport PageTitle from '../../components/page-title';\nimport DetailPageContainer from '../../components/detail-page-container';\nimport PostWrapper from '../../components/post/post-wrapper';\nimport PostVote from '../../components/post/post-vote';\nimport PostSummary from '../../components/post/post-summary';\nimport CommentList from '../../components/post/comment-list';\nimport CommentItem from '../../components/post/comment-list/comment-item';\nimport AnswerContainer from '../../components/answer-container';\nimport AddAnswer from '../../components/add-answer';\nimport { Spinner } from '../../components/icons';\nconst QuestionDetail = ({\n  questionId,\n  title\n}) => {\n  const {\n    0: question,\n    1: setQuestion\n  } = useState(null);\n  const {\n    0: answerSortType,\n    1: setAnswersSortType\n  } = useState('Votes');\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/${questionId}`);\n      setQuestion(data);\n    };\n    fetchQuestion();\n  }, []);\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score;\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created);\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created);\n      default:\n        break;\n    }\n  };\n  const isClient = false;\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"link\", {\n    rel: \"canonical\",\n    href: isClient && window.location.href,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  })), __jsx(PageTitle, {\n    title: title,\n    button: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }\n  }), __jsx(DetailPageContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, !question && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 11\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 13\n    }\n  })), question && __jsx(React.Fragment, null, __jsx(PostWrapper, {\n    borderBottom: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }\n  }, __jsx(PostVote, {\n    score: question.score,\n    votes: question.votes,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 15\n    }\n  }), __jsx(PostSummary, {\n    tags: question.tags,\n    author: question.author,\n    created: question.created,\n    questionId: questionId,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }, question.text), __jsx(CommentList, {\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 15\n    }\n  }, question.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 19\n    }\n  }, body)))), question.answers.length > 0 && __jsx(AnswerContainer, {\n    answersCount: question.answers.length,\n    answerSortType: answerSortType,\n    setAnswerSortType: setAnswersSortType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, question.answers.sort(handleSorting()).map(answer => __jsx(PostWrapper, {\n    key: answer.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 19\n    }\n  }, __jsx(PostVote, {\n    score: answer.score,\n    votes: answer.votes,\n    answerId: answer.id,\n    questionId: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 21\n    }\n  }), __jsx(PostSummary, {\n    author: answer.author,\n    created: answer.created,\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 21\n    }\n  }, answer.text), __jsx(CommentList, {\n    questionId: questionId,\n    answerId: answer.id,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 21\n    }\n  }, answer.comments.map(({\n    id,\n    author,\n    created,\n    body\n  }) => __jsx(CommentItem, {\n    key: id,\n    commentId: id,\n    questionId: questionId,\n    answerId: answer.id,\n    author: author.username,\n    isOwner: author.username === question.author.username,\n    created: created,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 25\n    }\n  }, body)))))), __jsx(AddAnswer, {\n    tags: question.tags,\n    id: questionId,\n    setQuestion: setQuestion,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }\n  }))));\n};\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug;\n  const questionId = slug.split('-').shift();\n  const title = slug === null || slug === void 0 ? void 0 : slug.substr(slug.indexOf('-') + 1).split('-').join(' ');\n  return {\n    props: {\n      questionId,\n      title\n    }\n  };\n}\nexport default QuestionDetail;","map":{"version":3,"names":["React","useEffect","useState","Head","publicFetch","Layout","PageTitle","DetailPageContainer","PostWrapper","PostVote","PostSummary","CommentList","CommentItem","AnswerContainer","AddAnswer","Spinner","QuestionDetail","questionId","title","question","setQuestion","answerSortType","setAnswersSortType","fetchQuestion","data","get","handleSorting","a","b","score","Date","created","isClient","__jsx","extra","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","rel","href","window","location","button","className","Fragment","borderBottom","votes","tags","author","text","comments","map","id","body","key","commentId","username","isOwner","answers","length","answersCount","setAnswerSortType","sort","answer","answerId","getServerSideProps","context","slug","params","split","shift","substr","indexOf","join","props"],"sources":["C:/Users/HP/Downloads/Bhimkatta-20240216T072757Z-001/Bhimkatta/client/client/pages/questions/[slug].js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\n\nimport { publicFetch } from '../../util/fetcher'\n\nimport Layout from '../../components/layout'\nimport PageTitle from '../../components/page-title'\nimport DetailPageContainer from '../../components/detail-page-container'\nimport PostWrapper from '../../components/post/post-wrapper'\nimport PostVote from '../../components/post/post-vote'\nimport PostSummary from '../../components/post/post-summary'\nimport CommentList from '../../components/post/comment-list'\nimport CommentItem from '../../components/post/comment-list/comment-item'\nimport AnswerContainer from '../../components/answer-container'\nimport AddAnswer from '../../components/add-answer'\nimport { Spinner } from '../../components/icons'\n\nconst QuestionDetail = ({ questionId, title }) => {\n  const [question, setQuestion] = useState(null)\n  const [answerSortType, setAnswersSortType] = useState('Votes')\n\n  useEffect(() => {\n    const fetchQuestion = async () => {\n      const { data } = await publicFetch.get(`/question/${questionId}`)\n      setQuestion(data)\n    }\n\n    fetchQuestion()\n  }, [])\n\n  const handleSorting = () => {\n    switch (answerSortType) {\n      case 'Votes':\n        return (a, b) => b.score - a.score\n      case 'Newest':\n        return (a, b) => new Date(b.created) - new Date(a.created)\n      case 'Oldest':\n        return (a, b) => new Date(a.created) - new Date(b.created)\n      default:\n        break\n    }\n  }\n\n  const isClient = typeof window === 'object'\n\n  return (\n    <Layout extra={false}>\n      <Head>\n        <title>{title}</title>\n        <link rel=\"canonical\" href={isClient && window.location.href}></link>\n      </Head>\n\n      <PageTitle title={title} button />\n\n      <DetailPageContainer>\n        {!question && (\n          <div className=\"loading\">\n            <Spinner />\n          </div>\n        )}\n\n        {question && (\n          <>\n            <PostWrapper borderBottom={false}>\n              <PostVote\n                score={question.score}\n                votes={question.votes}\n                questionId={questionId}\n                setQuestion={setQuestion}\n              />\n              <PostSummary\n                tags={question.tags}\n                author={question.author}\n                created={question.created}\n                questionId={questionId}\n              >\n                {question.text}\n              </PostSummary>\n              <CommentList questionId={questionId} setQuestion={setQuestion}>\n                {question.comments.map(({ id, author, created, body }) => (\n                  <CommentItem\n                    key={id}\n                    commentId={id}\n                    questionId={questionId}\n                    author={author.username}\n                    isOwner={author.username === question.author.username}\n                    created={created}\n                    setQuestion={setQuestion}\n                  >\n                    {body}\n                  </CommentItem>\n                ))}\n              </CommentList>\n            </PostWrapper>\n\n            {question.answers.length > 0 && (\n              <AnswerContainer\n                answersCount={question.answers.length}\n                answerSortType={answerSortType}\n                setAnswerSortType={setAnswersSortType}\n              >\n                {question.answers.sort(handleSorting()).map((answer) => (\n                  <PostWrapper key={answer.id}>\n                    <PostVote\n                      score={answer.score}\n                      votes={answer.votes}\n                      answerId={answer.id}\n                      questionId={questionId}\n                      setQuestion={setQuestion}\n                    />\n                    <PostSummary\n                      author={answer.author}\n                      created={answer.created}\n                      questionId={questionId}\n                      answerId={answer.id}\n                      setQuestion={setQuestion}\n                    >\n                      {answer.text}\n                    </PostSummary>\n                    <CommentList\n                      questionId={questionId}\n                      answerId={answer.id}\n                      setQuestion={setQuestion}\n                    >\n                      {answer.comments.map(({ id, author, created, body }) => (\n                        <CommentItem\n                          key={id}\n                          commentId={id}\n                          questionId={questionId}\n                          answerId={answer.id}\n                          author={author.username}\n                          isOwner={author.username === question.author.username}\n                          created={created}\n                          setQuestion={setQuestion}\n                        >\n                          {body}\n                        </CommentItem>\n                      ))}\n                    </CommentList>\n                  </PostWrapper>\n                ))}\n              </AnswerContainer>\n            )}\n\n            <AddAnswer\n              tags={question.tags}\n              id={questionId}\n              setQuestion={setQuestion}\n            />\n          </>\n        )}\n      </DetailPageContainer>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(context) {\n  const slug = context.params.slug\n  const questionId = slug.split('-').shift()\n  const title = slug\n    ?.substr(slug.indexOf('-') + 1)\n    .split('-')\n    .join(' ')\n\n  return {\n    props: {\n      questionId,\n      title\n    }\n  }\n}\n\nexport default QuestionDetail\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,WAAW;AAE5B,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,OAAOC,MAAM,MAAM,yBAAyB;AAC5C,OAAOC,SAAS,MAAM,6BAA6B;AACnD,OAAOC,mBAAmB,MAAM,wCAAwC;AACxE,OAAOC,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,QAAQ,MAAM,iCAAiC;AACtD,OAAOC,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,WAAW,MAAM,oCAAoC;AAC5D,OAAOC,WAAW,MAAM,iDAAiD;AACzE,OAAOC,eAAe,MAAM,mCAAmC;AAC/D,OAAOC,SAAS,MAAM,6BAA6B;AACnD,SAASC,OAAO,QAAQ,wBAAwB;AAEhD,MAAMC,cAAc,GAAGA,CAAC;EAAEC,UAAU;EAAEC;AAAM,CAAC,KAAK;EAChD,MAAM;IAAA,GAACC,QAAQ;IAAA,GAAEC;EAAW,IAAIlB,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM;IAAA,GAACmB,cAAc;IAAA,GAAEC;EAAkB,IAAIpB,QAAQ,CAAC,OAAO,CAAC;EAE9DD,SAAS,CAAC,MAAM;IACd,MAAMsB,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,MAAM;QAAEC;MAAK,CAAC,GAAG,MAAMpB,WAAW,CAACqB,GAAG,CAAE,aAAYR,UAAW,EAAC,CAAC;MACjEG,WAAW,CAACI,IAAI,CAAC;IACnB,CAAC;IAEDD,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMG,aAAa,GAAGA,CAAA,KAAM;IAC1B,QAAQL,cAAc;MACpB,KAAK,OAAO;QACV,OAAO,CAACM,CAAC,EAAEC,CAAC,KAAKA,CAAC,CAACC,KAAK,GAAGF,CAAC,CAACE,KAAK;MACpC,KAAK,QAAQ;QACX,OAAO,CAACF,CAAC,EAAEC,CAAC,KAAK,IAAIE,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC,GAAG,IAAID,IAAI,CAACH,CAAC,CAACI,OAAO,CAAC;MAC5D,KAAK,QAAQ;QACX,OAAO,CAACJ,CAAC,EAAEC,CAAC,KAAK,IAAIE,IAAI,CAACH,CAAC,CAACI,OAAO,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,OAAO,CAAC;MAC5D;QACE;IACJ;EACF,CAAC;EAED,MAAMC,QAAQ,QAA6B;EAE3C,OACEC,KAAA,CAAC5B,MAAM;IAAC6B,KAAK,EAAE,KAAM;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACnBP,KAAA,CAAC9B,IAAI;IAAAgC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACHP,KAAA;IAAAE,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAQtB,KAAa,CAAC,EACtBe,KAAA;IAAMQ,GAAG,EAAC,WAAW;IAACC,IAAI,EAAEV,QAAQ,IAAIW,MAAM,CAACC,QAAQ,CAACF,IAAK;IAAAP,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAO,CAChE,CAAC,EAEPP,KAAA,CAAC3B,SAAS;IAACY,KAAK,EAAEA,KAAM;IAAC2B,MAAM;IAAAV,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CAAC,EAElCP,KAAA,CAAC1B,mBAAmB;IAAA4B,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACjB,CAACrB,QAAQ,IACRc,KAAA;IAAKa,SAAS,EAAC,SAAS;IAAAX,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GACtBP,KAAA,CAAClB,OAAO;IAAAoB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAAE,CACP,CACN,EAEArB,QAAQ,IACPc,KAAA,CAAAjC,KAAA,CAAA+C,QAAA,QACEd,KAAA,CAACzB,WAAW;IAACwC,YAAY,EAAE,KAAM;IAAAb,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/BP,KAAA,CAACxB,QAAQ;IACPoB,KAAK,EAAEV,QAAQ,CAACU,KAAM;IACtBoB,KAAK,EAAE9B,QAAQ,CAAC8B,KAAM;IACtBhC,UAAU,EAAEA,UAAW;IACvBG,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC1B,CAAC,EACFP,KAAA,CAACvB,WAAW;IACVwC,IAAI,EAAE/B,QAAQ,CAAC+B,IAAK;IACpBC,MAAM,EAAEhC,QAAQ,CAACgC,MAAO;IACxBpB,OAAO,EAAEZ,QAAQ,CAACY,OAAQ;IAC1Bd,UAAU,EAAEA,UAAW;IAAAkB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAEtBrB,QAAQ,CAACiC,IACC,CAAC,EACdnB,KAAA,CAACtB,WAAW;IAACM,UAAU,EAAEA,UAAW;IAACG,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC3DrB,QAAQ,CAACkC,QAAQ,CAACC,GAAG,CAAC,CAAC;IAAEC,EAAE;IAAEJ,MAAM;IAAEpB,OAAO;IAAEyB;EAAK,CAAC,KACnDvB,KAAA,CAACrB,WAAW;IACV6C,GAAG,EAAEF,EAAG;IACRG,SAAS,EAAEH,EAAG;IACdtC,UAAU,EAAEA,UAAW;IACvBkC,MAAM,EAAEA,MAAM,CAACQ,QAAS;IACxBC,OAAO,EAAET,MAAM,CAACQ,QAAQ,KAAKxC,QAAQ,CAACgC,MAAM,CAACQ,QAAS;IACtD5B,OAAO,EAAEA,OAAQ;IACjBX,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAExBgB,IACU,CACd,CACU,CACF,CAAC,EAEbrC,QAAQ,CAAC0C,OAAO,CAACC,MAAM,GAAG,CAAC,IAC1B7B,KAAA,CAACpB,eAAe;IACdkD,YAAY,EAAE5C,QAAQ,CAAC0C,OAAO,CAACC,MAAO;IACtCzC,cAAc,EAAEA,cAAe;IAC/B2C,iBAAiB,EAAE1C,kBAAmB;IAAAa,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAErCrB,QAAQ,CAAC0C,OAAO,CAACI,IAAI,CAACvC,aAAa,CAAC,CAAC,CAAC,CAAC4B,GAAG,CAAEY,MAAM,IACjDjC,KAAA,CAACzB,WAAW;IAACiD,GAAG,EAAES,MAAM,CAACX,EAAG;IAAApB,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC1BP,KAAA,CAACxB,QAAQ;IACPoB,KAAK,EAAEqC,MAAM,CAACrC,KAAM;IACpBoB,KAAK,EAAEiB,MAAM,CAACjB,KAAM;IACpBkB,QAAQ,EAAED,MAAM,CAACX,EAAG;IACpBtC,UAAU,EAAEA,UAAW;IACvBG,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC1B,CAAC,EACFP,KAAA,CAACvB,WAAW;IACVyC,MAAM,EAAEe,MAAM,CAACf,MAAO;IACtBpB,OAAO,EAAEmC,MAAM,CAACnC,OAAQ;IACxBd,UAAU,EAAEA,UAAW;IACvBkD,QAAQ,EAAED,MAAM,CAACX,EAAG;IACpBnC,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAExB0B,MAAM,CAACd,IACG,CAAC,EACdnB,KAAA,CAACtB,WAAW;IACVM,UAAU,EAAEA,UAAW;IACvBkD,QAAQ,EAAED,MAAM,CAACX,EAAG;IACpBnC,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAExB0B,MAAM,CAACb,QAAQ,CAACC,GAAG,CAAC,CAAC;IAAEC,EAAE;IAAEJ,MAAM;IAAEpB,OAAO;IAAEyB;EAAK,CAAC,KACjDvB,KAAA,CAACrB,WAAW;IACV6C,GAAG,EAAEF,EAAG;IACRG,SAAS,EAAEH,EAAG;IACdtC,UAAU,EAAEA,UAAW;IACvBkD,QAAQ,EAAED,MAAM,CAACX,EAAG;IACpBJ,MAAM,EAAEA,MAAM,CAACQ,QAAS;IACxBC,OAAO,EAAET,MAAM,CAACQ,QAAQ,KAAKxC,QAAQ,CAACgC,MAAM,CAACQ,QAAS;IACtD5B,OAAO,EAAEA,OAAQ;IACjBX,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAExBgB,IACU,CACd,CACU,CACF,CACd,CACc,CAClB,EAEDvB,KAAA,CAACnB,SAAS;IACRoC,IAAI,EAAE/B,QAAQ,CAAC+B,IAAK;IACpBK,EAAE,EAAEtC,UAAW;IACfG,WAAW,EAAEA,WAAY;IAAAe,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAC1B,CACD,CAEe,CACf,CAAC;AAEb,CAAC;AAED,OAAO,eAAe4B,kBAAkBA,CAACC,OAAO,EAAE;EAChD,MAAMC,IAAI,GAAGD,OAAO,CAACE,MAAM,CAACD,IAAI;EAChC,MAAMrD,UAAU,GAAGqD,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACC,KAAK,CAAC,CAAC;EAC1C,MAAMvD,KAAK,GAAGoD,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CACdI,MAAM,CAACJ,IAAI,CAACK,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAC9BH,KAAK,CAAC,GAAG,CAAC,CACVI,IAAI,CAAC,GAAG,CAAC;EAEZ,OAAO;IACLC,KAAK,EAAE;MACL5D,UAAU;MACVC;IACF;EACF,CAAC;AACH;AAEA,eAAeF,cAAc"},"metadata":{},"sourceType":"module"}