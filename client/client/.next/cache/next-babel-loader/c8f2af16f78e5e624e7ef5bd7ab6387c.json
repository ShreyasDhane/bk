{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Downloads\\\\Bhimkatta-20240216T072757Z-001\\\\Bhimkatta\\\\client\\\\client\\\\pages\\\\users\\\\[username].js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport Head from 'next/head';\nimport { publicFetch } from '../../util/fetcher';\nimport Layout from '../../components/layout';\nimport UserCard from '../../components/user-card';\nimport AvatarCard from '../../components/user-card/avatar-card';\nimport PostList from '../../components/user-card/post-list';\nimport PostItem from '../../components/user-card/post-list/post-item';\nimport { Spinner } from '../../components/icons';\nconst UserDetail = ({\n  username\n}) => {\n  const {\n    0: posts,\n    1: setPosts\n  } = useState(null);\n  const {\n    0: postType,\n    1: setPostType\n  } = useState('Questions');\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const {\n        data\n      } = await publicFetch.get(`/question/user/${username}`);\n      setPosts(data);\n    };\n    fetchQuestions();\n  }, [postType, username]);\n  return __jsx(Layout, {\n    extra: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, __jsx(Head, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }\n  }, __jsx(\"title\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, \"Users \", username, \" - BhimKatta\")), __jsx(UserCard, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, __jsx(AvatarCard, {\n    username: username,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }), __jsx(PostList, {\n    postType: postType,\n    setPostType: setPostType,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }, !posts && __jsx(\"div\", {\n    className: \"loading\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 13\n    }\n  }, __jsx(Spinner, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 15\n    }\n  })), posts === null || posts === void 0 ? void 0 : posts.map(({\n    id,\n    title,\n    score,\n    created\n  }) => __jsx(PostItem, {\n    key: id,\n    title: title,\n    vote: score,\n    created: created,\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  })), (posts === null || posts === void 0 ? void 0 : posts.length) == 0 && __jsx(\"p\", {\n    className: \"not-found-questions\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }, \"Don't have any questions yet.\"))));\n};\nexport async function getServerSideProps(context) {\n  const username = context.params.username;\n  return {\n    props: {\n      username\n    }\n  };\n}\nexport default UserDetail;","map":{"version":3,"names":["React","useEffect","useState","Head","publicFetch","Layout","UserCard","AvatarCard","PostList","PostItem","Spinner","UserDetail","username","posts","setPosts","postType","setPostType","fetchQuestions","data","get","__jsx","extra","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","map","id","title","score","created","key","vote","length","getServerSideProps","context","params","props"],"sources":["C:/Users/HP/Downloads/Bhimkatta-20240216T072757Z-001/Bhimkatta/client/client/pages/users/[username].js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\nimport Head from 'next/head'\n\nimport { publicFetch } from '../../util/fetcher'\n\nimport Layout from '../../components/layout'\nimport UserCard from '../../components/user-card'\nimport AvatarCard from '../../components/user-card/avatar-card'\nimport PostList from '../../components/user-card/post-list'\nimport PostItem from '../../components/user-card/post-list/post-item'\nimport { Spinner } from '../../components/icons'\n\nconst UserDetail = ({ username }) => {\n  const [posts, setPosts] = useState(null)\n  const [postType, setPostType] = useState('Questions')\n\n  useEffect(() => {\n    const fetchQuestions = async () => {\n      const { data } = await publicFetch.get(`/question/user/${username}`)\n      setPosts(data)\n    }\n    fetchQuestions()\n  }, [postType, username])\n\n  return (\n    <Layout extra={false}>\n      <Head>\n        <title>Users {username} - BhimKatta</title>\n      </Head>\n\n      <UserCard>\n        <AvatarCard username={username} />\n        <PostList postType={postType} setPostType={setPostType}>\n          {!posts && (\n            <div className=\"loading\">\n              <Spinner />\n            </div>\n          )}\n\n          {posts?.map(({ id, title, score, created }) => (\n            <PostItem\n              key={id}\n              title={title}\n              vote={score}\n              created={created}\n              id={id}\n            />\n          ))}\n\n          {posts?.length == 0 && (\n            <p className=\"not-found-questions\">\n              Don&apos;t have any questions yet.\n            </p>\n          )}\n        </PostList>\n      </UserCard>\n    </Layout>\n  )\n}\n\nexport async function getServerSideProps(context) {\n  const username = context.params.username\n  return {\n    props: {\n      username\n    }\n  }\n}\n\nexport default UserDetail\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}